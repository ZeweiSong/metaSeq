#!/usr/bin/env perl
# (c) 2016 - 2019 Chao IN-HORSE SHARE ONLY
# ===================================================================
# Description:       Find the REGed region and formated for circos
# Author:            Chao | fangchao@genomics.cn
# Version:           V0.0
# Last modified:     19 Jan 2019 (since 19 Jan 2019)
# ===================================================================
# see detail below
use strict;
use Getopt::Long qw(:config no_ignore_case); # For case sensitive

sub usage {
  my $msg = shift;
  print <<USAGE;
$msg
usage:
  findRegion -i input -o output -r refID
  findRegion -s sam -o output
    -i  blast 6 format REGment file
    -o  output karyotype format file
    -v  verbose
    -h  show help info
USAGE
}
&usage && exit unless @ARGV;

my ($inf,$out,$verbose,$help);
GetOptions(
  "i:s" => \$inf,
  "o:s" => \$out,
  "v" => \$verbose,
  "h|help|?" => \$help,
);
&usage && exit if $help;
open OUT, ($out)?">$out":">-" or die $!;
open INF, ($inf)?"<$inf":"<-" or die $!;

&verbose("Start reading alignemnt info ... ");
my (%REG,@tmp);
while(<INF>){
  chomp;
  my @a = split;
  my @se = ($a[8]<$a[9])?($a[8],$a[9]):($a[9],$a[8]);
  $REG{$a[1]}{$se[0]}{S} = $se[0];
  $REG{$a[1]}{$se[0]}{E} = $se[1];
  my @ks = sort {$a<=>$b} keys %{$REG{$a[1]}};
  for(my $i=0;$i<@ks;$i++){
    if($ks[$i] + 10 > $se[1]){last};
    my $ke = $REG{$a[1]}{$ks[$i]}{E};
    if($ke - 10 < $se[0]){next};
    $se[0] = ($se[0]<$ks[$i])?$se[0]:$ks[$i];
    $se[1] = ($se[1]>$ke)?$se[1]:$ke;
  }
  for(my $i=0;$i<@ks;$i++){
    if($ks[$i] + 10 > $se[1]){last};
    my $ke = $REG{$a[1]}{$ks[$i]}{E};
    if($ke - 10 < $se[0]){next};
    $REG{$a[1]}{$ks[$i]}{S} = $se[0];
    $REG{$a[1]}{$ks[$i]}{E} = $se[1];
  }
}
close INF;
&verbose("done!\nWriting ... ");
#Reopen and add region info
open INF, ($inf)?"<$inf":"<-" or die $!;
while(<INF>){
  chomp;
  my @a = split;
  my @se = ($a[8]<$a[9])?($a[8],$a[9]):($a[9],$a[8]);
  my $iRegion = $REG{$a[1]}{$se[0]}{S}.'-'.$REG{$a[1]}{$se[0]}{E};
  my $range = $REG{$a[1]}{$se[0]}{E} - $REG{$a[1]}{$se[0]}{S} + 1;
  print OUT "$_\t$iRegion\t$range\n";
}
close INF;
close OUT;
&verbose("done!\n");
exit;

sub verbose{
  my $msg = shift;
  print STDERR $msg if $verbose;
}
