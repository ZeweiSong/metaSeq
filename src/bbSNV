#!/usr/bin/env perl
# (c) 2016 - 2019 Chao IN-HORSE SHARE ONLY
# ===================================================================
# Description:       SNV detecting
# Author:            Chao | fangchao@genomics.cn
# Version:           V0.1
# Last modified:    25 Oct 2019 (since 25 Oct 2019)
# ===================================================================
# see detail below
use strict;
use Getopt::Long qw(:config no_ignore_case); # For case sensitive
################################################################################
# help information
################################################################################
my($verbose,$help);
sub usage {
  my $msg = shift;
print <<USAGE;
$msg
usage:
  bbSNV <mode> [option]
  mode:
    uc     stat cluster relationship
    align  alignment to longest sequence
    snv    assess snv
options:  Defined according to the mode and cmd you chosed.
USAGE
}
&usage("Stating beads related information") && exit if @ARGV == 0 || $ARGV[0] eq "-h";

my $mode = shift @ARGV unless $ARGV[0] =~/^-/;

our ($in0,$in1,$in2,$in3, $ucf, $inf,$bam, $out,$verbose,$help);
GetOptions(
  "i0=s" => \$in0,
  "i1=s" => \$in1,
  "i2=s" => \$in2,
  "i3=s" => \$in3,
  "u=s" => \$ucf,
  "f=s" => \$inf,
  "b=s" => \$bam,
  "o=s" => \$out,
  "v" => \$verbose,
  "h|help|?" => \$help,
);
# Main start
&run_uc    if $mode =~ "uc";
&run_align if $mode =~ "align";
&run_snv if $mode =~ "snv";
# Main end

&verbose("[log] All done!\n");

exit;
################################################################################
# sub function
################################################################################
sub verbose{
  my $msg = shift;
  print STDERR $msg if $verbose;
}
################################################################################
# UC
sub usage4uc {
  my $msg = shift;
print <<USAGE;
$msg
usage:
  $0 uc -i fasta -i1 cdhit.uc -i2 clust.uc -i3 derep.uc -o output.prefix
    -i  fasta sequence file
    -i0  unchime file with 10 column
    -i1  unchime file with 10 column
    -i2  unchime file with 10 column
    -o  output filename
    -v  verbose
    -h  show help info
USAGE
}
&usage4uc("Stat cluster relationship") && exit unless @ARGV;

sub run_uc {
  my (%CLUST);
  &usage4uc("Stat cluster relationship") && exit if $help;
  #&usage("[fatal] Essential input is missing");

  &verbose("[log] Mode [UC] start ... \n");
  my(%UC,%SEQ,%ID,%CT,$cNo);
  #Here is the shorts for each column. Find more detail in VSEARCH manual.
  ##   0         1       2            3            4  5  6      7     8        9##
  ##Type  #Cluster  length  similarity%  orientation  *  *  CIGAR query centroid##
  open IN0, ($in0)?"<$in0":"<-" or die $!;
  open IN1, "<$in1" or die $!;
  open IN2, "<$in2" or die $!;
  open OUT, ($out)?">$out":">-" or die $!;

  while(<IN1>){
    chomp;
    my @a = split;
    next if $a[0] eq "C";
    if($a[0] eq "S"){
      $cNo ++;
      $CT{$cNo} ++;
      $UC{$cNo}{$CT{$cNo}}{'lv'} = "L0";
      $UC{$cNo}{$CT{$cNo}}{'seq'} = $a[8];
      $UC{$cNo}{$CT{$cNo}}{'len'} = $a[2];
      $ID{$a[8]} = $cNo;
    }elsif($a[0] eq "H"){
      my $iNo = $ID{$a[9]};
      $ID{$a[8]} = $iNo;
      $CT{$iNo} ++;
      $UC{$iNo}{$CT{$iNo}}{'lv'} = "L1";
      $UC{$iNo}{$CT{$iNo}}{'seq'} = $a[8];
      $UC{$iNo}{$CT{$iNo}}{'len'} = $a[2];
    }
  }
  close IN1;
  while(<IN2>){
    chomp;
    my @a = split;
    next unless $a[0] eq "H";
    my $iNo = $ID{$a[9]};
    $ID{$a[8]} = $iNo;
    $CT{$iNo} ++;
    $UC{$iNo}{$CT{$iNo}}{'lv'} = "L2";
    $UC{$iNo}{$CT{$iNo}}{'seq'} = $a[8];
    $UC{$iNo}{$CT{$iNo}}{'len'} = $a[2];
  }
  close IN2;
  if($in3){
    open IN3, "<$in3" or die $!;
    while(<IN3>){
      chomp;
      my @a = split;
      next unless $a[0] eq "H";
      my $iNo = $ID{$a[9]};
      $ID{$a[8]} = $iNo;
      $CT{$iNo} ++;
      $UC{$iNo}{$CT{$iNo}}{'lv'} = "L3";
      $UC{$iNo}{$CT{$iNo}}{'seq'} = $a[8];
      $UC{$iNo}{$CT{$iNo}}{'len'} = $a[2];
    }
    close IN3;
  }
  &verbose("[log] Finish read. stat ... \n");
  foreach my $i (sort {$a<=>$b} keys %UC){
    foreach my $c (sort {$a<=>$b} keys %{$UC{$i}}){
      my $out = sprintf("%d\t%d\t%d\t%s\t%s\t%s\n",$i,$CT{$i},$c,
      $UC{$i}{$c}{'lv'},$UC{$i}{$c}{'len'},$UC{$i}{$c}{'seq'});
      print OUT $out;
    }
  }
  close OUT;
  &verbose("[log] Mode [UC] done ... \n");
}

################################################################################
# Alignment
sub usage4align{
  my $msg = shift;
print <<USAGE;
$msg
usage:
  $0 uc -i <sam/bam file> -o output.prefix
    -u  uc file
    -f  fasta sequence file
    -o  output filename
    -v  verbose
    -h  show help info
USAGE
}
&usage4align("Mapping sub contigs to centroids") && exit unless @ARGV;

sub run_align {
  my (%CLUST);
  &usage4align("Mapping sub contigs to centroids") && exit if $help;
  #&usage("[fatal] Essential input is missing");

  &verbose("[log] Mode [Align] start ... \n");
  my $cmd = "awk '(\$2>1&&\$4==\"L0\"&&(\$5>999||\$2>9)){print \$6}' $ucf | grep --no-group-separator -f - -A1 $inf|sed 's/_(\\S*)_/_/g' > tmp/bbSNV.t.ref.fa";
  &verbose("[cmd] $cmd\n");
  system($cmd);
  &verbose("[Align] index...\n");
  system("bwa index tmp/bbSNV.t.ref.fa -p tmp/bbSNV.t.ref.fa");
  &verbose("[Align] Aligning...\n");
  system("sed 's/_(\\S*)_/_/g' $inf |bwa mem -t 32 tmp/bbSNV.t.ref.fa - |samtools view -b | samtools sort > tmp/bbSNV.t.align.bam");
}

################################################################################
# SNV
sub usage4snv {
  my $msg = shift;
print <<USAGE;
$msg
usage:
  $0 uc -u <uc file> -b <sam/bam file> -o output.prefix
    -u  uc file
    -b  fasta sequence file
    -o  output filename
    -v  verbose
    -h  show help info
USAGE
}
&usage4snv("Stat cluster relationship") && exit unless @ARGV;

sub run_snv {
  my (%CLUST);
  &usage4snv("Stat alignemnt snv relationship") && exit if $help;
  #&usage("[fatal] Essential input is missing");

  &verbose("[log] Mode [SNV] start ... \n");
  my(%KMER,%SNV);
  #Here is the shorts for each column. Find more detail in VSEARCH manual.
  ##   0         1       2            3            4  5  6      7     8        9##
  ##Type  #Cluster  length  similarity%  orientation  *  *  CIGAR query centroid##
  open UCF, ($ucf)?"< $ucf":"< - " or die $!;
  open BAM, ($bam)?"samtools view $bam|":"samtools view - |" or die $!;
  open OUT, ($out)?">$out.cov":">-" or die $!;
  open OFA, ">$out.fa" or die $!;
  while(<UCF>){
    chomp;
    my @a = split;
    $a[5] =~ s/_\(\S*\)_/_/g;
    $CLUST{$a[5]}{'UC'} = $a[0];
    $CLUST{$a[5]}{'size'} = $a[1];
    $CLUST{$a[5]}{'len'} = $a[4];
  }
  close UCF;

  while(<BAM>){
    next if $_ =~/^@/;
    my @a = split;
    my ($qUC,$rUC) = ($CLUST{$a[0]}{'UC'}, $CLUST{$a[2]}{'UC'});
    next if $qUC ne $rUC;
    ###
    my $rPos = $a[3]-1;
    my $str = $a[9];
    my $len = length($str);
    my ($qPos,$shift,$subz) = (0,0,0);
    next if $a[2] eq "*";
    while($a[5]){
      $subz ++;
      $a[5] =~ s/^(\d*)([MIDNSHP=X])//;
      my ($n,$m) = ($1,$2); $n ||=1;
      if($m eq "S"&&$subz==1){
        $shift = -$n; $qPos += $n;
      }elsif($m eq "I"){
        $str = substr($str,0,$qPos).substr($str,$qPos+$n,$len-$qPos-$n);
        $len -= $n;
      }elsif($m eq "D"){
        $str = substr($str,0,$qPos).("-" x $n).substr($str,$qPos,$len-$qPos);
        $len += $n;
        $qPos += $n;
      }
    }
    for(my $i=0;$i<=$len-30;$i++){
      my $k = substr($str,$i,30);
      $KMER{$rUC}{$rPos+$shift+$i}{$k} ++;
    }
    for(my $i=0;$i<=$len-1;$i++){
      my $N = substr($a[9],$i,1);
      $SNV{$rUC}{$rPos+$shift+$i}{$N} ++;
    }
  }
  &verbose("[log] Finish read. stat ... \n");

  print OUT "UC\tPOS\tcov.K30\tcov.N\tBASE\tpct\tA\tT\tC\tG\n";
  foreach my $u (sort {$a <=> $b} keys %SNV){
    my ($lowCov,$preCov,$curCov,$sumCov,$preNs,$cliff,$clip,$representSeq);
    for(my $i=(sort {$a<=>$b} keys %{$SNV{$u}})[0]; $i<=(sort {$b<=>$a} keys %{$SNV{$u}})[0];$i++){
      $curCov = (sort {$b<=>$a} values %{$KMER{$u}{$i}})[0];
      my ($baseMax,$sum) = ('N',0);
      foreach my $j (keys %{$SNV{$u}{$i}}){
        $SNV{$u}{$i}{$j} ||=0;
        $sum += $SNV{$u}{$i}{$j};
        $baseMax = ($SNV{$u}{$i}{$j}>$SNV{$u}{$i}{$baseMax})?$j:$baseMax;
      }
      my $out = sprintf("%d\t%s\t%d\t%d\t%s\t%.2f\t%d\t%d\t%d\t%d\n",$u, $i, $curCov, $sum, $baseMax,
      ($sum>0)?$SNV{$u}{$i}{$baseMax}/$sum:"NA",
      $SNV{$u}{$i}{'A'}, $SNV{$u}{$i}{'T'}, $SNV{$u}{$i}{'C'}, $SNV{$u}{$i}{'G'});
      print OUT $out;
      $sumCov += $sum;
      if($preCov>0&&$curCov/$preCov<0.2){
        $lowCov ++;
        $cliff = $preCov;
      }elsif($lowCov>0&&$sum/($preNs+0.01)>0.7&&$curCov/$cliff<0.2){
        $lowCov ++;
      }elsif($lowCov>0&&$sum/($preNs+0.01)>0.7&&$curCov/($preCov+0.01)>0.7){
        #Determined to be a clip here
        $clip ++;
        my $len = length($representSeq);
        my $iCov = sprintf("%.2f",$sumCov / $len);
        print OFA ">LFR_$u.$clip\_$iCov\_$len\n$representSeq\n";
        ($representSeq, $lowCov,$cliff,$sumCov) = ();
      }
      #
      if($i>=0){ $representSeq .= $baseMax}
      $preCov = $curCov;
      $preNs  = $sum;
    }
    $clip ++;
    my $len = length($representSeq); my $iCov = sprintf("%.2f",$sumCov / $len);
    print OFA ">LFR_$u.$clip\_$iCov\_$len\n$representSeq\n";
  }
  close OUT; close OFA;
  &verbose("[log] Mode [UC] done ... \n");
}
