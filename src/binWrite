#!/usr/bin/env perl
# (c) 2016 - 2019 Chao IN-HORSE SHARE ONLY
# ===================================================================
# Description:       stat the overlap depth between each 2 beads.
# Author:            Chao | fangchao@genomics.cn
# Version:           V0.0
# Last modified:    14 Jan 2019 (since 14 Jan 2019)
# ===================================================================
# see detail below

use strict;
use Getopt::Long;

my($verbose,$help);
sub usage {
  my $msg = shift;
print <<USAGE;
$msg
usage:
  binWrite <mode> [option]
mode:
    bin     binnig preparation
    uniq    stat unique centroids of dulicates within each beads
    best    output best anno with specified cutoffs
    fqpick  filter fq files with beads above a threashold

options:  Defined according to the mode and cmd you chosed.
USAGE
}

&usage("A writing script for binning process") && exit if @ARGV == 0 || $ARGV[0] eq "-h";

my $mode = shift @ARGV unless $ARGV[0] =~/^-/;

#Global needed vars
my (%CDD);
### MAIN
&run_bin if $mode =~ /^(bin|)$/;
&run_uniq if $mode eq "uniq";
&run_best if $mode eq "best";
&run_fqpick if $mode eq "fqpick";
### END
exit;

sub usage4bin {
  my $msg = shift;
print <<USAGE;
$msg
usage [v0.1] :
  binWrite bin -l level -i anno -a asmDir -o binDir
    -i  unique annoataion file
    -6  blast6 file with annoatation.
    -o  output dir
    -a  Assemble dir
    -l  level [species|genus|family|...]
    -v  verbose
    -h  show help info
USAGE
}

sub run_bin {
  &usage4bin("Writing scaffolds according to specified level") && exit unless @ARGV;
  my (%BINS,$inf,$blast6,$asmD,$out,$lv,@heads,$head,$ilv);
  GetOptions(
    "i=s" => \$inf,
    "6=s" => \$blast6,
    "a=s" => \$asmD,
    "o=s" => \$out,
    "l=s" => \$lv,
    "v" => \$verbose,
    "h|help|?" => \$help,
  );
  &usage4bin("Writing scaffolds according to specified level") && exit if $help;
  &verbose("[bin] Mode start ... \n");
  if($inf){
    open INF, ($inf)?"<$inf":"<-" or die $!;

    chomp($head = <INF>);
    @heads = split(/\t/,$head);
    for(my $i=0;$i<@heads;$i++){
      $ilv = $i if $heads[$i] eq $lv;
    }
    die "Can not find the specified level: $lv. Please check again!\n" unless $ilv;
    &verbose("[bin] Reading annotation ...");
    while(<INF>){
      chomp;
      my @info = split (/\t/,$_);
      $BINS{$info[$ilv]}{$info[3]}{$info[0]} = $info[4];
    }
    close INF;
    my $taxs = keys %BINS;
    &verbose("[bin] done!\n Found $taxs taxonomies.\n");
  }
  if($blast6){
    &verbose("[bin] Reading from blast6 file with annoatation... ");
    open INF, ($blast6)?"<$blast6":"<-" or die $!;
    my $lv1 = substr($lv,0,1);
    while(<INF>){
      chomp;
      my @info = split (/\t/,$_);
      $info[17] =~ /s__([a-zA-Z_]+)(;|)/;
      $BINS{$1}{$info[0]}{$info[1]} = $info[4];
    }
    close INF;
    my $taxs = keys %BINS;
    &verbose("[bin] done!\n Found $taxs taxonomies.\n");
  }
  &verbose("[bin] Reading and wirting scaffolds.\n");
  my $bak=$/; $/=">";
  foreach my $tax (sort keys %BINS){
    system("mkdir -p $out\/$tax") unless(-d "$out/$tax");
    open OUT, ">$out/$tax/scaffolds.fasta" or die $!;
    open FQ1, ">$out/$tax/reads_1.fastq" or die $!;
    open FQ2, ">$out/$tax/reads_2.fastq" or die $!;
    foreach my $bc (sort keys %{$BINS{$tax}}){
      my @nodes = sort keys %{$BINS{$tax}{$bc}};
      open SF, "<$asmD/$bc/scaffolds.fasta" or die "cannot open $asmD/$bc/scaffolds.fasta!\n$!\n";
      #my $inode = shift @nodes;
      #my $seqid = $BINS{$tax}{$bc}{shift @nodes};
      my $seqid = shift @nodes;
      while(<SF>){
        chomp;
        if($_ =~ /^$seqid/){
          print OUT ">$bc\_$_";
          last unless @nodes;
          $seqid = $BINS{$tax}{$bc}{shift @nodes};
        }
      }
      close SF;
      open IQ1, "<$asmD/$bc/sort.1.fq" or die "$!";
      open IQ2, "<$asmD/$bc/sort.2.fq" or die "$!";
      print FQ1 <IQ1>;
      print FQ2 <IQ2>;
      close IQ1;
      close IQ2;
    }
    close OUT;
    close FQ1;
    close FQ2;
    &verbose("[bin] Passing $tax ...\n");
  }
  $/=$bak;
  &verbose("[bin] All done!\n");
}

sub usage4uniq {
  my $msg = shift;
  print <<USAGE;
$msg
usage [v0.1] :
  binWrite uniq -t read.in.beads.tsv -c count.main -u bead.dup.uniq -o output
    -t  read.in.beads.tsv
    -c  count.main file
    -u  bead.dup.uniq file
    -o  output
    -v  verbose
    -h  show help info
USAGE
}
sub run_uniq {
  &usage4uniq("stat beads uniq reads number") && exit unless @ARGV;
  my ($tsv,$cnt,$dup,$out,%M);
  GetOptions(
    "t=s" => \$tsv,
    "c=s" => \$cnt,
    "u=s" => \$dup,
    "o=s" => \$out,
    "v" => \$verbose,
    "h|help|?" => \$help,
  );
  &usage4uniq("stat beads uniq reads number") && exit if $help;
  &verbose("[bin] Mode start ... \n");
  open IN1, "<$tsv" or die $!;
  open IN2, "<$dup" or die $!;
  open OUT, ($out)?">$out":">-" or die $!;
  open CNT, "<$cnt" or die $!;
  while(<CNT>){
    chomp;
    my @a = split(/\t/,$_);
    $M{$a[1]} = 1;
  }
  close CNT;

  #Here is the shorts for each column.
  ##   0         1         2  ##
  ##  BB     uniqs  allCount  ##
  my ($run1, $run2, $count1, $count2) = (1,1,0,0);
  chomp(my $read1 = <IN1>);
  my @inf1 = split (/\t/,$read1);
  chomp(my $read2 = <IN2>);
  my @inf2 = split (/\t/,$read2);
  my $sdups = $inf2[2] - $inf2[1];

  while($run1 && $run2){

    while($run1 && "$inf1[0]" lt "$inf2[0]"){
      $count1 ++;
      print OUT "$read1\t$inf1[1]\n" unless $M{$inf1[0]};
      chomp($read1 = <IN1>);
      $run1 = 0 && close IN1 if $read1 eq <EOF>;
      @inf1 = split (/\t/,$read1);
    }

    while("$inf1[0]" eq "$inf2[0]" && $inf1[0] ne <EOF>){
      my $uniqs = $inf1[1] - $sdups;
      $count1 ++; $count2 ++;
      print OUT "$read1\t$uniqs\n" unless $M{$inf1[0]};

      chomp($read1 = <IN1>);
      $run1 = 0 && close IN1 if $read1 eq <EOF>;
      @inf1 = split (/\t/,$read1);
      chomp($read2 = <IN2>);
      $run2 = 0 && close IN2 if $read2 eq <EOF>;
      @inf2 = split (/\t/,$read2);
      $sdups = $inf2[2] - $inf2[1];
    }

    while($run2 && "$inf1[0]" gt "$inf2[0]"){
      $count2 ++;
      print OUT "$inf2[0]\tNA\t-$sdups\n" unless $M{$inf2[0]}; ;
      chomp($read2 = <IN2>);
      $run2 = 0 && close IN2 if $read2 eq <EOF>;
      @inf2 = split (/\t/,$read2);
      $sdups = $inf2[2] - $inf2[1];
    }
    if($count1 % 10000 == 0 || $count2 % 10000 == 0){
      &verbose(sprintf("[log] Processing | file1: %9d | file2: %9d\n", $count1, $count2));
    }
  }
  &verbose("[log] tsv file closed.\n") unless $run1;
  &verbose("[log] dup file closed.\n") unless $run2;
  while($run1){
    $count1 ++;
    print OUT "$read1\t$inf1[1]\n" unless $M{$inf1[0]};
    chomp($read1 = <IN1>);
    $run1 = 0 && close IN2 if $read1 eq <EOF>;
    @inf1 = split (/\t/,$read1);
  }
  while($run2){
    $count2 ++;
    print OUT "$inf2[0]\tNA\t-$sdups\n" unless $M{$inf2[0]};
    chomp($read2 = <IN2>);
    $run2 = 0 && close IN2 if $read2 eq <EOF>;
    @inf2 = split (/\t/,$read2);
    $sdups = $inf2[2] - $inf2[1];
  }

  close OUT;
  &verbose("[log] Mode [uniq] done ... \n");
  exit;
}

sub usage4best {
  my $msg = shift;
print <<USAGE;
$msg
usage [v0.1] :
  binWrite uniq -e evalue -l length -c completeness -i input.blast6 -o output
    -f  format
    -e  evalue
    -l  length
    -c  completeness
    -i  input blast6 format (Make sure the query are sorted)
    -o  output prefix (will add .best suffix)
    -m  output a much more detailed result
    -u  output a uniq recrod for each scaffold
    -v  verbose
    -h  show help info
USAGE
}

sub run_best {
  &usage4best("output the best annoatation for each scaffold") && exit unless @ARGV;
  my ($eval,$fmt,$ident,$len,$cpt,$inf,$out,$more,$writeRegion,$uniq);
  GetOptions(
    "f=s" => \$fmt,
    "e=s" => \$eval,
    "d=f" => \$ident,
    "l=s" => \$len,
    "c=s" => \$cpt,
    "i=s" => \$inf,
    "o=s" => \$out,
    "m" => \$more,
    "u" => \$uniq,
    "r" => \$writeRegion,
    "v" => \$verbose,
    "h|help|?" => \$help,
  );
  &usage4best("output the best annoatation for each scaffold") && exit if $help;
  &verbose("[best] Mode start ... \n");
  #Init
  $more||=0;
  $writeRegion||=0;
  $uniq||=0;

  $fmt ||= "blast6";
  $eval||= 1;
  $ident||=90;
  $len ||= 0;
  $cpt ||= 0;
  $out ||= $inf;
  open IN,"<$inf" or die "Cannot open input file: $inf.\n";
  open OUT,">$out.best" or die "Cannot open output file: $out.\n";
  open MORE,">$out.more" or die "Cannot open output file: $more.\n" if $more;
  open UNIQ,">$out.uniq" or die "Cannot open output file: $uniq.\n" if $uniq;
  open REGION,">$out.region" or die "Cannot open output file: $out.region.\n" if $writeRegion;

  ## Here is the shorts for each column.
  ##     0       1       2       3         4        5       6     7       8     9      10        11##
  ##qseqid  sseqid  pident  length  mismatch  gapopen  qstart  qend  sstart  send  evalue  bitscore##
  my ($cddi,%RG,$rgi,$pTag,$pEval); # candidates records, regions of alignments saved here
  while(<IN>){
    chomp;
    my @rec = split(/\t/,$_);
    if($pTag ne $rec[0]){
      &writeCDD($uniq);
      %CDD = ();
      %RG  = ();
      $rgi = 1;
      $pEval = $rec[10];
      $pTag = $rec[0];
    }
    #filter by arguments
    if($fmt eq "blast6"){
      next if $rec[10] > $eval;
      next if $rec[2] < $ident;
      next if $rec[3] <= $len;
      next if $rec[3]/$rec[7] < $cpt;
    }

    #align candidates
    my $thisRg = "";
    #new scaffolds
    unless(%CDD){
      $thisRg = $rgi;
      #First region determined
      %{$RG{$thisRg}} = ('5'=>$rec[6],'3'=>$rec[7],'E'=>$rec[10],'L'=>$rec[3]);
      $CDD{$rec[0]}{$thisRg}{'_'} = $_;
      &verbose("[best] New scafs found: $rec[0]\n");
    }else{
      for(my $i=1;$i<=$rgi;$i++){
        my $board = sprintf("%0d",($RG{$i}{3}-$RG{$i}{5})/10);
        unless($rec[7] < $RG{$i}{5} + $board || $rec[6] > $RG{$i}{3} - $board){
          #Same region
          $thisRg = $i;
          #Same region determined
          last if $rec[10] > $RG{$i}{'E'};
          last if $rec[3] <= $RG{$i}{'L'};
          #&verbose("[Discard] \$.:$. | RG:$i | by Eval\n") && last if $rec[10] > $RG{$i}{'E'};
          #&verbose("[Discard] \$.:$. | RG:$i | by length\n") && last if $rec[3] <= $RG{$i}{'L'};
          #Then it's a better record
          %{$RG{$thisRg}} = ('5'=>$rec[6],'3'=>$rec[7],'E'=>$rec[10],'L'=>$rec[3]);
          $CDD{$rec[0]}{$thisRg}{'_'} = $_;
          #&verbose("[Replace] \$.:$. | RG:$i | new: $rec[6] - $rec[7] | RG: $RG{$i}{5} - $RG{$i}{3}\n");
          last;
        }
        #&verbose("[Differ] \$.:$. | RG:$i | new: $rec[6] - $rec[7] | RG: $RG{$i}{5} - $RG{$i}{3}\n");
      }
      unless($thisRg){
        $rgi ++;
        $thisRg = $rgi;
        #new region determined
        %{$RG{$thisRg}} = ('5'=>$rec[6],'3'=>$rec[7],'E'=>$rec[10],'L'=>$rec[3]);
        $CDD{$rec[0]}{$thisRg}{'_'} = $_;
        #&verbose("[best] New regin found: $thisRg | $rec[6] - $rec[7]\n");
      }
    }
    if($more){
      print MORE "$thisRg\t$_\n";
    }
  }
  close IN;
  close MORE;
  # The last one
  &writeCDD($uniq,$writeRegion);
  close OUT;
  close REGION if $writeRegion;
  close UNIQ;
  &verbose("[Best] done!\n");
  exit;
}

sub writeCDD {
  my $uniq = shift;
  my $writeRegion = shift;
  return() unless %CDD;
  foreach my $query (sort keys %CDD){
    my ($best,$score) = ("",0);
    foreach my $regin (sort keys %{$CDD{$query}}){
      print OUT "$CDD{$query}{$regin}{'_'}\n";
      print REGION "$CDD{$query}{$regin}{'_'}\n" if $writeRegion;
      if($uniq){
        my @rec = split(/\t/,$CDD{$query}{$regin}{'_'});
        if($rec[2] > $score){
          $best = $CDD{$query}{$regin}{'_'};
          $score = $rec[2];
        }
      }
    }
    print UNIQ "$best\n" if $uniq;
  }
  return();
}

sub usage4fqpick {
  my $msg = shift;
  print <<USAGE;
$msg
usage [v0.1] :
  binWrite fqpick -x fastq.idx -c cutoff -i fastq -o output
    -x  fastq index file
    -c  minial reads number of a bead allowed
    -m  maximal reads number of a bead allowed
    -b  top beads numer, for the sake of downsampling
    -r  randomly piece num, pick one piece of this num
    -i  fqstq file
    -o  output
    -v  verbose
    -h  show help info
USAGE
}

sub run_fqpick {
  &usage4fqpick("filter fq files with beads above a threashold") && exit unless @ARGV;
  my ($idx,$cut,$cMax,$topB,$randomPiece,$inf,$out,%IDX);
  GetOptions(
    "x=s" => \$idx,
    "c=i" => \$cut,
    "m=i" => \$cMax,
    "b=i" => \$topB,
    "r=i" => \$randomPiece,
    "i=s" => \$inf,
    "o=s" => \$out,
    "v" => \$verbose,
    "h|help|?" => \$help,
  );
  &usage4fqpick("filter fq files with beads above a threashold\n") && exit if $help;
  undef $topB if $topB == 0;
  undef $randomPiece if $randomPiece ==0;
  
  &verbose("[pick] Mode start ... \n");
  open IDX, "<$idx" or die $!;
  open INF, "<$inf" or die $!;
  open OUT, ($out)?">$out":">-" or die $!;

  srand($randomPiece) if $randomPiece;

  my ($Li,$bcount, @idxs) = (0,0,0,0,0);
  while(<INF>){
    $Li ++;
    my $idx_;
    while($Li>$idxs[2] && ($idx_ = <IDX>)){
      chomp($idx_);
      next if $idx_ =~ /0000/;
      my @a = split(/\t/,$idx_);
      my $n = ($a[2] - $a[1] + 1 ) / 4;
      next if $n < $cut;
      next if $cMax && $n > $cMax ;
      next if $randomPiece && int(rand($randomPiece))>0;
      @idxs = @a;
      $bcount ++;
      last;
    }
    while($Li<$idxs[1]){ $_ = <INF> ; $Li ++ }

    print OUT $_ if $Li <= $idxs[2];
    last if $topB && $Li>=$idxs[2] && $bcount >= $topB;
  }
  close IDX;
  close INF;
  close OUT;
  &verbose("[pick] done ... \n");
  exit;
}




sub verbose{
  my $msg = shift;
  print STDERR $msg if $verbose;
}
